#!/usr/bin/env node
const path = require('path');
const colorxjs = require('colorxjs')
const b = process.cwd();

colorxjs.writeSync(`
const colorxjs = require('colorxjs')

module.exports={

    create(tableName){
        return new Promise((resolve, reject)=>{
            try {
                colorxjs.write({},'./'+tableName+'.json')
            } catch (error) {
                reject('Couldn\'t create this table. Try again or check if it already exists.')
            }
        })
    },
    updateOn(tableName, key, what){
        const db= require('./'+tableName+'.json')
        return new Promise((resolve, reject)=>{
            if(db[key]===undefined){
                reject('Key is not there')
            }else{
                db[key] = what;
                colorxjs.write(db,'./'+tableName+'.json')
                resolve(true)
            }
        })
    },
    readOn(key){
        return new Promise((resolve, reject)=>{
            const db= require('./db.json')
            resolve(db[key])
        },err=>{
            reject(err)
        })
    },
    deleteThis(key, tableName){
        const db= require('./'+tableName+'.json')
        return new Promise((resolve, reject)=>{
            console.log('kye',key)
            if(db[key]===undefined){
                reject('Key is not there')
            }else{
                delete db[key]
                colorxjs.write(db,'./'+tableName+'.json')
                resolve(true)
            }
        })
    },
    zeroOn(key, tableName){
        const db= require('./'+tableName+'.json')
        return new Promise((resolve, reject)=>{
            if(typeof db[key]!=='number'){
                reject('Error: Key value is not a number')
            }else{
                db[key] = 0;
                colorxjs.write(db,'./'+tableName+'.json')
                resolve(true)
            }
        })
    },
    emptyOn(key, tableName){
        const db= require('./'+tableName+'.json')

        return new Promise((resolve, reject)=>{
            if(typeof db[key]!=='string'){
                reject('Error: Key value is not a string')
            }else{
                db[key] = ''
                colorxjs.write(db,'./'+tableName+'.json')
                resolve(true)
            }
        })
    },
    toggleBoolOn(key, tableName){
        const db= require('./'+tableName+'.json')

        return new Promise((resolve, reject)=>{
            if(typeof db[key]!=='boolean'){
                reject('Error: Key value is not a boolean')
            }else{
                if(db[key]===false){
                    db[key]=true;
                }else{
                    db[key]=false
                }
            colorxjs.write(db,'./'+tableName+'.json')
            resolve(true)
            }
        })
        
    },
    plus(amount, key, tableName){
        const db= require('./'+tableName+'.json')
            return new Promise((resolve, reject)=>{
                if(typeof db[key]!=='number'){
                    reject('Error: Key value is not a number')
                }else{
                    console.log('number')
                    db[key]+=amount;
                    colorxjs.write(db,'./'+tableName+'.json')
                    resolve(true)
                }
            })  
    },
    getAllKeys(tableName){
        const db= require('./'+tableName+'.json')
            return new Promise((resolve, reject)=>{
                if(typeof db!=='object'){
                    reject('Error: Something is wrong with the db.json file')
                }else{
                    resolve(Object.keys(db))
                }
            })  
    },
    getTable(tableName){
        const db= require('./'+tableName+'.json')
            return new Promise((resolve, reject)=>{
                try {
                    const db= require('./'+tableName+'.json')
                    resolve(db)
                } catch (error) {
                    reject('Error: Something is wrong with the db.json file')
                }
            })  
    }

}

                
        `, '/locloud.js')


colorxjs.writeSync(`{}`, 
'/db.json')

colorxjs.writeSync(`//Sample code generated by locloud

const locloud = require('./locloud')
const colorxjs = require('colorxjs')


//this will add to the object a key "hello" and a value "world"
locloud.updateOn('hello', 'world', 'db').then(res=>{

    //after 3 seconds, show the db on the console
    colorxjs.regressiva(3000).subscribe(fin=>{    
        locloud.getTable('db').then(obj=>{
            console.log(obj)
        });
    })
    
})
`, 
'/locloud-starter.js')